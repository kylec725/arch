priority -50

extends texmath

# Allows snippets to only be used in math mode
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet init "import base packages" b
\documentclass[${1:11pt}]{${2:article}}
\usepackage[utf8]{inputenc}

$0
endsnippet

snippet math "import math packages" b
\usepackage{amsmath, amssymb, amsthm, centernot}
\DeclareMathOperator{\Exists}{\exists}
\DeclareMathOperator{\Nexists}{\nexists}
\DeclareMathOperator{\Forall}{\forall}
\newcommand{\notimplies}{\centernot\implies}
\renewcommand\qedsymbol{$\blacksquare$}
% Auto resizing parentheses and brackets
\newcommand*\autoop{\left(}
\newcommand*\autocp{\right)}
\newcommand*\autoob{\left[}
\newcommand*\autocb{\right]}
\AtBeginDocument {%
   \mathcode\`( 32768
   \mathcode\`) 32768
   \mathcode\`[ 32768
   \mathcode\`] 32768
   \begingroup
       \lccode\`\~\`(
       \lowercase{%
   \endgroup
       \let~\autoop
   }\begingroup
       \lccode\`\~\`)
       \lowercase{%
   \endgroup
       \let~\autocp
   }\begingroup
       \lccode\`\~\`[
       \lowercase{%
   \endgroup
       \let~\autoob
   }\begingroup
       \lccode\`\~\`]
       \lowercase{%
   \endgroup
       \let~\autocb
   }}

\delimiterfactor 1001

\makeatletter
% for amsmath "compatibility" (not sophisticated)
% \usepackage{amsmath}
\AtBeginDocument {%
          \def\resetMathstrut@{%
           \setbox\z@\hbox{\the\textfont\symoperators\char40}%
           \ht\Mathstrutbox@\ht\z@ \dp\Mathstrutbox@\dp\z@}%
}%
\makeatother
$0
endsnippet

snippet "b(egin)?" "begin{} / end{}" br
\begin{$1}$0
\end{$1}
endsnippet

snippet dm "display math mode" bA
\[ $0 \]
endsnippet

snippet proof "proof environment" bA
\begin{proof}\leavevmode
	$1
\end{proof}$0
endsnippet

snippet theorem "theorem" bA
\newtheorem{theorem}{${1:Theorem}}
\begin{theorem}
	$2
\end{theorem}$0
endsnippet

snippet corollary "corollary" bA
\newtheorem{corollary}{${1:Corollary}}[theorem]
\begin{corollary}
	$2
\end{corollary}$0
endsnippet

snippet lemma "lemma" bA
\newtheorem{lemma}[theorem]{${1:Lemma}}
\begin{lemma}
	$2
\end{lemma}$0
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

#                    #
# Math Mode Snippets #
#                    #

context "math()"
snippet "(\S)_(-|!|<|>|[a-zA-Z0-9]\S)" "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$0}
endsnippet

context "math()"
snippet "(\S)\^(-|!|<|>|[a-zA-Z0-9]\S)" "auto superscript" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$0}
endsnippet

context "math()"
snippet * "inserts \cdot for multiplication" wA
\cdot
endsnippet

context "math()"
snippet floor "floor" wA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet ceil "ceiling" wA
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet abs "absolute value" wA
\left| $1 \right|$0
endsnippet

context "math()"
snippet "([A-Za-z])hat" "hat" irA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])bar" "bar" irA
\bar{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z])vec" "vector" irA
\vec{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet to "to arrow" wA
\to
endsnippet

context "math()"
snippet imp "implies" wA
\implies
endsnippet

context "math()"
snippet notimp "not implies" wA
\notimplies
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet <= "less than or equal to" iA
\leq
endsnippet

context "math()"
snippet >= "greater than or equal to" iA
\geq
endsnippet

context "math()"
snippet != "not equal to" iA
\neq
endsnippet

context "math()"
snippet and "and" wA
\land
endsnippet

context "math()"
snippet or "or" wA
\lor
endsnippet

context "math()"
snippet neg "negation" wA
\neg
endsnippet

# trigonometric functions
context "math()"
snippet cos "cosine" wA
\cos
endsnippet

context "math()"
snippet sin "sine" wA
\sin
endsnippet

context "math()"
snippet tan "tangent" wA
\tan
endsnippet

context "math()"
snippet csc "cosecant" wA
\csc
endsnippet

context "math()"
snippet sec "secant" wA
\sec
endsnippet

context "math()"
snippet cot "cotangent" wA
\cot
endsnippet

# sets
context "math()"
snippet "([A-Za-z])set" "sets" irA
\mathbb{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet nullset "null set" wA
\O
endsnippet

context "math()"
snippet " in " "in" wrA
 \in 
endsnippet

context "math()"
snippet " notin " "not in" wrA
 \notin 
endsnippet

context "math()"
snippet fa "for all" wA
\Forall
endsnippet

context "math()"
snippet te "exists" wA
\Exists
endsnippet

context "math()"
snippet tne "not exists" wA
\Nexists
endsnippet

context "math()"
snippet iff "iff" wA
\iff
endsnippet

context "math()"
snippet " st " "such that" wrA
 \mid 
endsnippet

context "math()"
snippet tf "therefore" wA
\therefore
endsnippet

context "math()"
snippet inf "infinity symbol" wA
\infty
endsnippet

context "math()"
snippet int "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} $0
endsnippet

context "math()"
snippet sum "summation" wA
\sum\limits_{${1:n=1}}^{${2:\infty}} $0
endsnippet

context "math()"
snippet prod "product" wA
\prod\limits_{${1:n=1}}^{${2:\infty}} $0
endsnippet

context "math()"
snippet lim "limit" wA
\lim\limits_{${1:n} \to ${2:\infty}} $0
endsnippet
