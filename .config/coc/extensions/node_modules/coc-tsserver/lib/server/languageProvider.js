"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const coc_nvim_1 = require("coc.nvim");
const baseCodeLensProvider_1 = require("./features/baseCodeLensProvider");
const completionItemProvider_1 = tslib_1.__importDefault(require("./features/completionItemProvider"));
const definitionProvider_1 = tslib_1.__importDefault(require("./features/definitionProvider"));
const directiveCommentCompletions_1 = tslib_1.__importDefault(require("./features/directiveCommentCompletions"));
const documentHighlight_1 = tslib_1.__importDefault(require("./features/documentHighlight"));
const documentSymbol_1 = tslib_1.__importDefault(require("./features/documentSymbol"));
const fileConfigurationManager_1 = tslib_1.__importDefault(require("./features/fileConfigurationManager"));
const folding_1 = tslib_1.__importDefault(require("./features/folding"));
const formatting_1 = tslib_1.__importDefault(require("./features/formatting"));
const hover_1 = tslib_1.__importDefault(require("./features/hover"));
const implementationsCodeLens_1 = tslib_1.__importDefault(require("./features/implementationsCodeLens"));
// import TagCompletionProvider from './features/tagCompletion'
const quickfix_1 = tslib_1.__importDefault(require("./features/quickfix"));
const importFix_1 = tslib_1.__importDefault(require("./features/importFix"));
const refactor_1 = tslib_1.__importDefault(require("./features/refactor"));
const references_1 = tslib_1.__importDefault(require("./features/references"));
const referencesCodeLens_1 = tslib_1.__importDefault(require("./features/referencesCodeLens"));
const rename_1 = tslib_1.__importDefault(require("./features/rename"));
const signatureHelp_1 = tslib_1.__importDefault(require("./features/signatureHelp"));
const updatePathOnRename_1 = tslib_1.__importDefault(require("./features/updatePathOnRename"));
const watchBuild_1 = tslib_1.__importDefault(require("./features/watchBuild"));
const workspaceSymbols_1 = tslib_1.__importDefault(require("./features/workspaceSymbols"));
const smartSelect_1 = tslib_1.__importDefault(require("./features/smartSelect"));
const moduleInstall_1 = tslib_1.__importDefault(require("./features/moduleInstall"));
const api_1 = tslib_1.__importDefault(require("./utils/api"));
const organizeImports_1 = require("./organizeImports");
const suggestionSetting = 'suggestionActions.enabled';
class LanguageProvider {
    constructor(client, description, typingsStatus) {
        this.client = client;
        this.description = description;
        this.disposables = [];
        this.fileConfigurationManager = new fileConfigurationManager_1.default(client);
        coc_nvim_1.workspace.onDidChangeConfiguration(this.configurationChanged, this, this.disposables);
        this.configurationChanged();
        coc_nvim_1.events.on('BufEnter', bufnr => {
            let doc = coc_nvim_1.workspace.getDocument(bufnr);
            if (!doc || client.state !== coc_nvim_1.ServiceStat.Running)
                return;
            if (description.modeIds.indexOf(doc.filetype) == -1)
                return;
            this.fileConfigurationManager.ensureConfigurationForDocument(doc.textDocument); // tslint:disable-line
        }, this, this.disposables);
        let initialized = false;
        client.onTsServerStarted(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!initialized) {
                for (let doc of coc_nvim_1.workspace.documents) {
                    if (description.modeIds.indexOf(doc.filetype) !== -1) {
                        this.fileConfigurationManager.ensureConfigurationForDocument(doc.textDocument); // tslint:disable-line
                    }
                }
                initialized = true;
                this.registerProviders(client, typingsStatus);
            }
            else {
                this.client.diagnosticsManager.reInitialize();
            }
        }));
    }
    configurationChanged() {
        const config = coc_nvim_1.workspace.getConfiguration(this.id, null);
        this.client.diagnosticsManager.setEnableSuggestions(this.id, config.get(suggestionSetting, true));
    }
    dispose() {
        coc_nvim_1.disposeAll(this.disposables);
    }
    registerProviders(client, typingsStatus) {
        let languageIds = this.description.modeIds;
        this.disposables.push(coc_nvim_1.languages.registerCompletionItemProvider(`tsserver-${this.description.id}`, 'TSC', languageIds, new completionItemProvider_1.default(client, typingsStatus, this.fileConfigurationManager, this.description.id), completionItemProvider_1.default.triggerCharacters));
        if (this.client.apiVersion.gte(api_1.default.v230)) {
            this.disposables.push(coc_nvim_1.languages.registerCompletionItemProvider(`${this.description.id}-directive`, 'TSC', languageIds, new directiveCommentCompletions_1.default(client), ['@']));
        }
        let definitionProvider = new definitionProvider_1.default(client);
        this.disposables.push(coc_nvim_1.languages.registerDefinitionProvider(languageIds, definitionProvider));
        this.disposables.push(coc_nvim_1.languages.registerTypeDefinitionProvider(languageIds, definitionProvider));
        this.disposables.push(coc_nvim_1.languages.registerImplementationProvider(languageIds, definitionProvider));
        this.disposables.push(coc_nvim_1.languages.registerReferencesProvider(languageIds, new references_1.default(client)));
        this.disposables.push(coc_nvim_1.languages.registerHoverProvider(languageIds, new hover_1.default(client)));
        this.disposables.push(coc_nvim_1.languages.registerDocumentHighlightProvider(languageIds, new documentHighlight_1.default(this.client)));
        this.disposables.push(coc_nvim_1.languages.registerSignatureHelpProvider(languageIds, new signatureHelp_1.default(client), ['(', ',', '<', ')']));
        this.disposables.push(coc_nvim_1.languages.registerDocumentSymbolProvider(languageIds, new documentSymbol_1.default(client)));
        this.disposables.push(coc_nvim_1.languages.registerWorkspaceSymbolProvider(languageIds, new workspaceSymbols_1.default(client, languageIds)));
        this.disposables.push(coc_nvim_1.languages.registerRenameProvider(languageIds, new rename_1.default(client)));
        let formatProvider = new formatting_1.default(client, this.fileConfigurationManager);
        this.disposables.push(coc_nvim_1.languages.registerDocumentFormatProvider(languageIds, formatProvider));
        this.disposables.push(coc_nvim_1.languages.registerDocumentRangeFormatProvider(languageIds, formatProvider));
        this.disposables.push(coc_nvim_1.languages.registerOnTypeFormattingEditProvider(languageIds, formatProvider, [';', '}', '\n', String.fromCharCode(27)]));
        // this.disposables.push(
        //   new ProjectError(client, commandManager)
        // )
        if (this.client.apiVersion.gte(api_1.default.v280)) {
            this.disposables.push(coc_nvim_1.languages.registerFoldingRangeProvider(languageIds, new folding_1.default(this.client)));
            this.disposables.push(coc_nvim_1.languages.registerCodeActionProvider(languageIds, new organizeImports_1.OrganizeImportsCodeActionProvider(this.client, this.fileConfigurationManager), `tsserver-${this.description.id}`, [vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports]));
        }
        let { fileConfigurationManager } = this;
        let conf = fileConfigurationManager.getLanguageConfiguration(this.id);
        if (this.client.apiVersion.gte(api_1.default.v290)
            && conf.get('updateImportsOnFileMove.enable')) {
            this.disposables.push(new updatePathOnRename_1.default(client, this.fileConfigurationManager, this.id));
        }
        if (this.client.apiVersion.gte(api_1.default.v240)) {
            this.disposables.push(coc_nvim_1.languages.registerCodeActionProvider(languageIds, new refactor_1.default(client, this.fileConfigurationManager), 'tsserver', [vscode_languageserver_protocol_1.CodeActionKind.Refactor]));
        }
        this.disposables.push(coc_nvim_1.languages.registerCodeActionProvider(languageIds, new moduleInstall_1.default(client), 'tsserver'));
        this.disposables.push(coc_nvim_1.languages.registerCodeActionProvider(languageIds, new quickfix_1.default(client), 'tsserver', [vscode_languageserver_protocol_1.CodeActionKind.QuickFix]));
        this.disposables.push(coc_nvim_1.languages.registerCodeActionProvider(languageIds, new importFix_1.default(this.client.bufferSyncSupport), 'tsserver', [vscode_languageserver_protocol_1.CodeActionKind.QuickFix]));
        let cachedResponse = new baseCodeLensProvider_1.CachedNavTreeResponse();
        if (this.client.apiVersion.gte(api_1.default.v206)
            && conf.get('referencesCodeLens.enable')) {
            this.disposables.push(coc_nvim_1.languages.registerCodeLensProvider(languageIds, new referencesCodeLens_1.default(client, cachedResponse)));
        }
        if (this.client.apiVersion.gte(api_1.default.v220)
            && conf.get('implementationsCodeLens.enable')) {
            this.disposables.push(coc_nvim_1.languages.registerCodeLensProvider(languageIds, new implementationsCodeLens_1.default(client, cachedResponse)));
        }
        if (this.client.apiVersion.gte(api_1.default.v350)) {
            this.disposables.push(coc_nvim_1.languages.registerSelectionRangeProvider(languageIds, new smartSelect_1.default(this.client)));
        }
        if (this.description.id == 'typescript') {
            this.disposables.push(new watchBuild_1.default(coc_nvim_1.commands));
        }
        // if (this.client.apiVersion.gte(API.v300)) {
        //   this.disposables.push(
        //     languages.registerCompletionItemProvider(
        //       `tsserver-${this.description.id}-tag`,
        //       'TSC',
        //       languageIds,
        //       new TagCompletionProvider(client),
        //       ['>']
        //     )
        //   )
        // }
    }
    handles(resource) {
        let { modeIds, configFile } = this.description;
        if (resource.toString().endsWith(configFile)) {
            return true;
        }
        let doc = coc_nvim_1.workspace.getDocument(resource.toString());
        if (doc && modeIds.indexOf(doc.filetype) !== -1) {
            return true;
        }
        let str = resource.toString();
        if (this.id === 'typescript' && /\.ts(x)?$/.test(str)) {
            return true;
        }
        if (this.id === 'javascript' && /\.js(x)?$/.test(str)) {
            return true;
        }
        return false;
    }
    get id() {
        return this.description.id;
    }
    get diagnosticSource() {
        return this.description.diagnosticSource;
    }
    triggerAllDiagnostics() {
        this.client.bufferSyncSupport.requestAllDiagnostics();
    }
    diagnosticsReceived(diagnosticsKind, file, diagnostics) {
        if (!this.client.bufferSyncSupport.shouldValidate(file.toString())) {
            return;
        }
        const config = coc_nvim_1.workspace.getConfiguration(this.id, file.toString());
        const reportUnnecessary = config.get('showUnused', true);
        this.client.diagnosticsManager.diagnosticsReceived(diagnosticsKind, file.toString(), diagnostics.filter(diag => {
            if (!reportUnnecessary) {
                diag.tags = undefined;
                if (diag.reportUnnecessary && diag.severity === vscode_languageserver_protocol_1.DiagnosticSeverity.Hint) {
                    return false;
                }
            }
            return true;
        }));
    }
}
exports.default = LanguageProvider;
//# sourceMappingURL=languageProvider.js.map