"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const languageDescription_1 = require("./utils/languageDescription");
const languageModeIds_1 = require("./utils/languageModeIds");
const typeconverts = tslib_1.__importStar(require("./utils/typeConverters"));
class OrganizeImportsCommand {
    constructor(client) {
        this.client = client;
        this.id = 'tsserver.organizeImports';
    }
    getTextEdits(document) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let file = client.toPath(document.uri);
            const args = {
                scope: {
                    type: 'file',
                    args: {
                        file
                    }
                }
            };
            const response = yield this.client.interruptGetErr(() => this.client.execute('organizeImports', args, vscode_languageserver_protocol_1.CancellationToken.None));
            if (!response || response.type != 'response' || !response.success) {
                return;
            }
            const edit = typeconverts.WorkspaceEdit.fromFileCodeEdits(client, response.body);
            let desc = languageDescription_1.standardLanguageDescriptions.find(o => o.modeIds.indexOf(document.languageId) !== -1);
            if (!desc)
                return null;
            const config = coc_nvim_1.workspace.getConfiguration(`${desc.id}.preferences`);
            let noSemicolons = config.get('noSemicolons', false);
            if (noSemicolons) {
                let { changes } = edit;
                if (changes) {
                    for (let c of Object.keys(changes)) {
                        for (let textEdit of changes[c]) {
                            textEdit.newText = textEdit.newText.replace(/;(?=(\n|$))/g, '');
                        }
                    }
                }
            }
            return edit;
        });
    }
    execute(document) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!document) {
                let doc = yield coc_nvim_1.workspace.document;
                if (languageModeIds_1.languageIds.indexOf(doc.filetype) == -1)
                    return;
                document = doc.textDocument;
            }
            let edit = yield this.getTextEdits(document);
            if (edit)
                yield coc_nvim_1.workspace.applyEdit(edit);
            return;
        });
    }
}
exports.OrganizeImportsCommand = OrganizeImportsCommand;
class OrganizeImportsCodeActionProvider {
    // public static readonly minVersion = API.v280
    constructor(client, fileConfigManager) {
        this.client = client;
        this.fileConfigManager = fileConfigManager;
        this.metadata = {
            providedCodeActionKinds: [vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports]
        };
    }
    provideCodeActions(document, _range, context, _token) {
        if (languageModeIds_1.languageIds.indexOf(document.languageId) == -1)
            return;
        if (!context.only || !context.only.includes(vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports)) {
            return [];
        }
        const action = vscode_languageserver_protocol_1.CodeAction.create('Organize Imports', {
            title: '',
            command: 'tsserver.organizeImports',
            arguments: [document]
        }, vscode_languageserver_protocol_1.CodeActionKind.SourceOrganizeImports);
        return [action];
    }
}
exports.OrganizeImportsCodeActionProvider = OrganizeImportsCodeActionProvider;
//# sourceMappingURL=organizeImports.js.map