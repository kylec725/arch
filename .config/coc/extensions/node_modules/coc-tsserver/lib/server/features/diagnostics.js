"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const resourceMap_1 = require("./resourceMap");
class DiagnosticSet {
    constructor() {
        this._map = new resourceMap_1.ResourceMap();
    }
    set(uri, diagnostics) {
        this._map.set(uri, diagnostics);
    }
    get(uri) {
        return this._map.get(uri) || [];
    }
    clear() {
        this._map = new resourceMap_1.ResourceMap();
    }
}
exports.DiagnosticSet = DiagnosticSet;
var DiagnosticKind;
(function (DiagnosticKind) {
    DiagnosticKind[DiagnosticKind["Syntax"] = 0] = "Syntax";
    DiagnosticKind[DiagnosticKind["Semantic"] = 1] = "Semantic";
    DiagnosticKind[DiagnosticKind["Suggestion"] = 2] = "Suggestion";
})(DiagnosticKind = exports.DiagnosticKind || (exports.DiagnosticKind = {}));
const allDiagnosticKinds = [
    DiagnosticKind.Syntax,
    DiagnosticKind.Semantic,
    DiagnosticKind.Suggestion
];
class DiagnosticsManager {
    constructor() {
        this._diagnostics = new Map();
        this._pendingUpdates = new resourceMap_1.ResourceMap();
        this._enableJavascriptSuggestions = true;
        this._enableTypescriptSuggestions = true;
        this.updateDelay = 200;
        for (const kind of allDiagnosticKinds) {
            this._diagnostics.set(kind, new DiagnosticSet());
        }
        this._currentDiagnostics = coc_nvim_1.languages.createDiagnosticCollection('tsserver');
    }
    dispose() {
        this._currentDiagnostics.dispose();
        for (const value of this._pendingUpdates.values) {
            clearTimeout(value);
        }
        this._pendingUpdates = new resourceMap_1.ResourceMap();
    }
    reInitialize() {
        this._currentDiagnostics.clear();
        for (const diagnosticSet of this._diagnostics.values()) {
            diagnosticSet.clear();
        }
    }
    setEnableSuggestions(languageId, value) {
        let curr = languageId == 'javascript' ? this._enableJavascriptSuggestions : this._enableTypescriptSuggestions;
        if (curr == value) {
            return;
        }
        if (languageId == 'javascript') {
            this._enableJavascriptSuggestions = value;
        }
        else {
            this._enableTypescriptSuggestions = value;
        }
    }
    diagnosticsReceived(kind, uri, diagnostics) {
        const collection = this._diagnostics.get(kind);
        if (!collection)
            return;
        if (diagnostics.length === 0) {
            const existing = collection.get(uri);
            if (existing.length === 0) {
                // No need to update
                return;
            }
        }
        collection.set(uri, diagnostics);
        this.scheduleDiagnosticsUpdate(uri);
    }
    configFileDiagnosticsReceived(uri, diagnostics) {
        this._currentDiagnostics.set(uri, diagnostics);
    }
    delete(uri) {
        this._currentDiagnostics.delete(uri);
    }
    getDiagnostics(uri) {
        return this._currentDiagnostics.get(uri) || [];
        return [];
    }
    scheduleDiagnosticsUpdate(uri) {
        if (!this._pendingUpdates.has(uri)) {
            this._pendingUpdates.set(uri, setTimeout(() => this.updateCurrentDiagnostics(uri), this.updateDelay));
        }
    }
    updateCurrentDiagnostics(uri) {
        if (this._pendingUpdates.has(uri)) {
            clearTimeout(this._pendingUpdates.get(uri));
            this._pendingUpdates.delete(uri);
        }
        const allDiagnostics = [
            ...this._diagnostics.get(DiagnosticKind.Syntax).get(uri),
            ...this._diagnostics.get(DiagnosticKind.Semantic).get(uri),
            ...this.getSuggestionDiagnostics(uri)
        ];
        this._currentDiagnostics.set(uri, allDiagnostics);
    }
    getSuggestionDiagnostics(uri) {
        const enabled = this.suggestionsEnabled(uri);
        return this._diagnostics
            .get(DiagnosticKind.Suggestion)
            .get(uri)
            .filter(x => {
            if (!enabled) {
                // Still show unused
                return x.tags && x.tags.includes(1);
            }
            return enabled;
        });
    }
    suggestionsEnabled(uri) {
        let doc = coc_nvim_1.workspace.getDocument(uri);
        if (!doc)
            return false;
        if (doc.filetype.startsWith('javascript')) {
            return this._enableJavascriptSuggestions;
        }
        if (doc.filetype.startsWith('typescript')) {
            return this._enableTypescriptSuggestions;
        }
        return true;
    }
}
exports.DiagnosticsManager = DiagnosticsManager;
//# sourceMappingURL=diagnostics.js.map