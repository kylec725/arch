"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const solargraph = tslib_1.__importStar(require("solargraph-utils"));
const net_1 = tslib_1.__importDefault(require("net"));
// export function makeLanguageClient(socketProvider: solargraph.SocketProvider): LanguageClient {
function makeLanguageClient(configuration) {
    let prepareStatus = coc_nvim_1.workspace.createStatusBarItem(10, { progress: true });
    prepareStatus.show();
    let middleware = {
        // fix completeItem
        provideCompletionItem: (document, position, context, token, next) => {
            return Promise.resolve(next(document, position, context, token)).then((res) => {
                let doc = coc_nvim_1.workspace.getDocument(document.uri);
                if (!doc)
                    return [];
                let items = res.hasOwnProperty('isIncomplete') ? res.items : res;
                let result = {
                    isIncomplete: false,
                    items
                };
                if (items.length
                    && items.every(o => o.label.startsWith(':'))) {
                    result.startcol = doc.fixStartcol(position, [':']);
                }
                return result;
            });
        }
    };
    // Options to control the language client
    let clientOptions = {
        documentSelector: [{ scheme: 'file', language: 'ruby' }, { scheme: 'file', pattern: '**/Gemfile' }],
        synchronize: {
            // Synchronize the setting section 'solargraph' to the server
            configurationSection: 'solargraph',
            // Notify the server about changes to relevant files in the workspace
            fileEvents: coc_nvim_1.workspace.createFileSystemWatcher('{**/*.rb,**/*.gemspec,**/Gemfile}')
        },
        middleware,
        initializationOptions: {
            enablePages: true,
            viewsPath: configuration.viewsPath
        }
    };
    let selectClient = () => {
        let transport = coc_nvim_1.workspace.getConfiguration('solargraph').transport;
        if (transport == 'stdio') {
            return () => {
                return new Promise(resolve => {
                    let child = solargraph.commands.solargraphCommand(['stdio'], configuration);
                    child.stderr.on('data', (data) => {
                        // tslint:disable-next-line: no-console
                        console.log(data.toString());
                    });
                    child.on('exit', (code, signal) => {
                        // tslint:disable-next-line: no-console
                        console.error('Solargraph exited with code', code, signal);
                    });
                    resolve(child);
                });
            };
        }
        else if (transport == 'socket') {
            return () => {
                return new Promise((resolve, reject) => {
                    let socketProvider = new solargraph.SocketProvider(configuration);
                    socketProvider.start().then(() => {
                        let socket = net_1.default.createConnection(socketProvider.port);
                        resolve({
                            reader: socket,
                            writer: socket
                        });
                    }).catch(err => {
                        reject(err);
                    });
                });
            };
        }
        else {
            return () => {
                return new Promise(resolve => {
                    let socket = net_1.default.createConnection({ host: coc_nvim_1.workspace.getConfiguration('solargraph').externalServer.host, port: coc_nvim_1.workspace.getConfiguration('solargraph').externalServer.port });
                    resolve({
                        reader: socket,
                        writer: socket
                    });
                });
            };
        }
    };
    let serverOptions = selectClient();
    let client = new coc_nvim_1.LanguageClient('solargraph', 'Ruby Language Server', serverOptions, clientOptions);
    let interval = setInterval(() => {
        prepareStatus.text = `Starting the Solargraph language server`;
    }, 100);
    client.onReady().then(() => {
        clearInterval(interval);
        prepareStatus.dispose();
        coc_nvim_1.workspace.showMessage('Solargraph is ready.', 'more');
        // if (vscode.workspace.getConfiguration('solargraph').checkGemVersion) {
        // 	client.sendNotification('$/solargraph/checkGemVersion')
        // }
    }).catch(() => {
        clearInterval(interval);
        prepareStatus.dispose();
        coc_nvim_1.workspace.showMessage('Solargraph failed to initialize.', 'error');
    });
    return client;
}
exports.makeLanguageClient = makeLanguageClient;
//# sourceMappingURL=language-client.js.map