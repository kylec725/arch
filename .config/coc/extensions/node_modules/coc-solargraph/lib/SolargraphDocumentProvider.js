"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const turndown_1 = tslib_1.__importDefault(require("turndown"));
const turndownService = new turndown_1.default();
class SolargraphDocumentProvider {
    constructor(languageClient) {
        this.languageClient = languageClient;
        this.docs = {};
    }
    updateAll() {
        Object.keys(this.docs).forEach(uri => {
            this.update(uri);
        });
    }
    remove(uri) {
        delete this.docs[uri];
    }
    provideTextDocumentContent(uri, token) {
        let key = uri.toString();
        let doc = this.docs[uri.toString()];
        if (doc)
            return doc;
        return new Promise(resolve => {
            let method = '$/solargraph' + uri.path;
            let query = this.parseQuery(uri.query.replace(/=/g, '%3D').replace(/\%$/, '%25').replace(/query\%3D/, 'query='));
            this.languageClient
                .sendRequest(method, { query: query.query })
                .then((result) => {
                coc_nvim_1.workspace.nvim.command('setfiletype markdown', true);
                if (result && result.content) {
                    let content = result.content.replace(/solargraph:\//g, 'solargraph:///');
                    let markdown = turndownService.turndown(content);
                    this.docs[key] = markdown;
                    resolve(markdown);
                }
                else {
                    this.docs[key] = '';
                    resolve('');
                }
            }, e => {
                resolve(`Load error ${e}`);
            });
        });
    }
    parseQuery(query) {
        let result = {};
        let parts = query.split('&');
        parts.forEach(part => {
            let frag = part.split('=');
            result[decodeURIComponent(frag[0])] = decodeURIComponent(frag[1]);
        });
        return result;
    }
    update(uri) {
        let method = '$/solargraph' + coc_nvim_1.Uri.parse(uri).path;
        let query = this.parseQuery(coc_nvim_1.Uri.parse(uri).query);
        this.languageClient
            .sendRequest(method, { query: query.query })
            .then((result) => {
            this.docs[uri.toString()] = result.content;
        });
    }
}
exports.default = SolargraphDocumentProvider;
//# sourceMappingURL=SolargraphDocumentProvider.js.map